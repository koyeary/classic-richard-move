{"version":3,"sources":["../../test/ruby-specs/contents.spec.js"],"names":["require","expect","client","LONG_TIMEOUT","test_repo","btoa","window","global","str","buffer","toString","Error","describe","timeout","it","repos","readme","read","then","contents","context","beforeEach","done","removeFile","octoPartial","content","config","sha","message","remove","removeFirst","content1","removeSecond","octoPartial2","fetch","repo","defaultBranch","branches","commit","add","err","console","log","response","to","match","response2","url","is","a"],"mappings":";;AAAA;eACmBA,QAAQ,MAAR,C;IAAXC,M,YAAAA,M;;gBACoCD,QAAQ,gBAAR,C;IAApCE,M,aAAAA,M;IAAQC,Y,aAAAA,Y;IAAcC,S,aAAAA,S;;AAE9B;;;AACA,IAAIC,OAAO,IAAX;;AAEA,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,WAAW,IAAhD,EAAsD;AACpDD,SAAOC,OAAOD,IAAd;AACA;AACD,CAHD,MAGO,IAAI,OAAOE,MAAP,KAAkB,WAAlB,IAAiCA,WAAW,IAAhD,EAAsD;AAC3DF,SAAO,cAAUG,GAAV,EAAe;AACpB,QAAIC,SAAS,IAAIF,OAAO,QAAP,CAAJ,CAAqBC,GAArB,EAA0B,QAA1B,CAAb;AACA,WAAOC,OAAOC,QAAP,CAAgB,QAAhB,CAAP;AACD,GAHD;AAID,CALM,MAKA;AACL,QAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAEDC,SAAS,UAAT,EAAqB,YAAY;AAC/B,OAAKC,OAAL,CAAaV,YAAb;;AAEAW,KAAG,4BAAH,EAAiC;AAAA,WAC/BZ,OAAOa,KAAP,CAAa,oBAAb,EAAmCC,MAAnC,CAA0CC,IAA1C,GACCC,IADD,CACM,UAAUF,MAAV,EAAkB,CAAE,CAD1B,CAD+B;AAAA,GAAjC;AAII;AACA;;AAEJF,KAAG,gCAAH,EAAqC;AAAA,WACnCZ,OAAOa,KAAP,CAAa,oBAAb,EAAmCI,QAAnC,CAA4C,gBAA5C,EAA8DF,IAA9D,GACCC,IADD,CACM,UAAUC,QAAV,EAAoB,CAAE,CAD5B,CADmC;AAAA,GAArC;AAII;AACA;;AAEJ;AACA;AACA;AACA;AACA;;AAEAC,UAAQ,aAAR,EAAuB,YAAY;AACjCC,eAAW,UAAUC,IAAV,EAAgB;AACzB,UAAIC,aAAa,SAAbA,UAAa,CAAUC,WAAV,EAAuBC,OAAvB,EAAgC;AAC/C,YAAIC,SAAS;AACXC,eAAKF,QAAQE,GADF;AAEXC,mBAAS;AAFE,SAAb;AAIA,eAAOJ,YAAYK,MAAZ,CAAmBH,MAAnB,CAAP;AACD,OAND;;AAQA;AACA,eAASI,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,iBAASC,YAAT,GAAyB;AACvB,cAAMC,eAAe/B,OAAOa,KAAP,CAAaX,SAAb,EAAwBe,QAAxB,CAAiC,iBAAjC,CAArB;AACAc,uBAAaC,KAAb;AACA;AADA,WAEChB,IAFD,CAEM,mBAAW;AACfK,uBAAWU,YAAX,EAAyBR,OAAzB,EACCP,IADD,CACM;AAAA,qBAAKI,MAAL;AAAA,aADN;AAED,WALD,EAKG;AAAA,mBAAOA,MAAP;AAAA,WALH;AAMD;AACDC,mBAAWC,WAAX,EAAwBO,QAAxB,EACCb,IADD,CACMc,YADN,EACoBA,YADpB;AAED;AACD,UAAIR,cAActB,OAAOa,KAAP,CAAaX,SAAb,EAAwBe,QAAxB,CAAiC,iBAAjC,CAAlB;AACAK,kBAAYU,KAAZ;AACA;AADA,OAEChB,IAFD,CAEMY,WAFN,EAEmBA,WAFnB;;AAKA;AACA;AACA;AACA;AACA,aAAO,IAAP;AACD,KAlCD;;AAoCAhB,OAAG,uCAAH,EAA4C,YAAM;AAChD,UAAMqB,OAAOjC,OAAOa,KAAP,CAAaX,SAAb,CAAb;AACA,aAAO+B,KAAKD,KAAL,GAAahB,IAAb,CAAkB,gBAAqB;AAAA,YAAnBkB,aAAmB,QAAnBA,aAAmB;;AAC5C,eAAOD,KAAKE,QAAL,CAAcD,aAAd,EAA6BF,KAA7B,GAAqChB,IAArC,CAA0C,iBAAc;AAAA,cAAZoB,MAAY,SAAZA,MAAY;;AAC7D,cAAIZ,SAAS;AACXE,qBAAS,iBADE;AAEXH,qBAASpB,KAAK,uBAAL;AAFE,WAAb;AAIA,iBAAO8B,KAAKhB,QAAL,CAAc,iBAAd,EAAiCoB,GAAjC,CAAqCb,MAArC,EACNR,IADM,CACD,IADC,EACK,UAAUsB,GAAV,EAAe;AAAEC,oBAAQC,GAAR,CAAYF,GAAZ,EAAkB,MAAM,IAAI7B,KAAJ,CAAU6B,GAAV,CAAN;AAAsB,WAD9D,EAENtB,IAFM,CAED,oBAAY;AAChB,mBAAOjB,OAAO0C,SAASL,MAAT,CAAgBX,GAAvB,EAA4BiB,EAA5B,CAA+BC,KAA/B,CAAqC,cAArC,CAAP;AACD,WAJM,CAAP;AAKD,SAVM,CAAP;AAWD,OAZM,CAAP;AAaD,KAfD;;AAiBA/B,OAAG,uCAAH,EAA4C,YAAM;AAChD;AACA,UAAMqB,OAAOjC,OAAOa,KAAP,CAAaX,SAAb,CAAb;AACA,aAAO+B,KAAKD,KAAL,GAAahB,IAAb,CAAkB,iBAAqB;AAAA,YAAnBkB,aAAmB,SAAnBA,aAAmB;;AAC5C,eAAOD,KAAKE,QAAL,CAAcD,aAAd,EAA6BF,KAA7B,GAAqChB,IAArC,CAA0C,iBAAc;AAAA,cAAZoB,MAAY,SAAZA,MAAY;;AAC7D,cAAIZ,SAAS;AACXE,qBAAS,iBADE;AAEXH,qBAASpB,KAAK,uBAAL;AAFE,WAAb;AAIA,iBAAO8B,KAAKhB,QAAL,CAAc,iBAAd,EAAiCoB,GAAjC,CAAqCb,MAArC,EACNR,IADM,CACD,IADC,EACK,UAAUsB,GAAV,EAAe;AAAEC,oBAAQC,GAAR,CAAYF,GAAZ,EAAkB,MAAM,IAAI7B,KAAJ,CAAU6B,GAAV,CAAN;AAAsB,WAD9D,EAENtB,IAFM,CAED,oBAAY;;AAEhB;AACA,gBAAIQ,SAAS;AACXC,mBAAKgB,SAASlB,OAAT,CAAiBE,GADX;AAEXC,uBAAS,iBAFE;AAGXH,uBAASpB,KAAK,sBAAL;AAHE,aAAb;AAKA,mBAAOH,OAAOa,KAAP,CAAaX,SAAb,EAAwBe,QAAxB,CAAiC,iBAAjC,EAAoDoB,GAApD,CAAwDb,MAAxD,EACNR,IADM,CACD,qBAAa;AACjB,qBAAOjB,OAAO6C,UAAUR,MAAV,CAAiBX,GAAxB,EAA6BiB,EAA7B,CAAgCC,KAAhC,CAAsC,cAAtC,CAAP;AACD,aAHM,CAAP;AAID,WAdM,CAAP;AAeD,SApBM,CAAP;AAqBD,OAtBM,CAAP;AAuBD,KA1BD;;AA4BA/B,OAAG,uCAAH,EAA4C,YAAM;AAChD;AACA,UAAMqB,OAAOjC,OAAOa,KAAP,CAAaX,SAAb,CAAb;AACA,aAAO+B,KAAKD,KAAL,GAAahB,IAAb,CAAkB,iBAAqB;AAAA,YAAnBkB,aAAmB,SAAnBA,aAAmB;;AAC5C,eAAOD,KAAKE,QAAL,CAAcD,aAAd,EAA6BF,KAA7B,GAAqChB,IAArC,CAA0C,iBAAc;AAAA,cAAZoB,MAAY,SAAZA,MAAY;;AAC7D,cAAIZ,SAAS;AACXE,qBAAS,6BADE;AAEXH,qBAASpB,KAAK,uBAAL;AAFE,WAAb;AAIA,iBAAO8B,KAAKhB,QAAL,CAAc,iBAAd,EAAiCoB,GAAjC,CAAqCb,MAArC,EACNR,IADM,CACD,IADC,EACK,UAAUsB,GAAV,EAAe;AAAEC,oBAAQC,GAAR,CAAYF,GAAZ,EAAkB,MAAM,IAAI7B,KAAJ,CAAU6B,GAAV,CAAN;AAAsB,WAD9D,EAENtB,IAFM,CAED,oBAAY;AAChBjB,mBAAO0C,SAASL,MAAT,CAAgBX,GAAvB,EAA4BiB,EAA5B,CAA+BC,KAA/B,CAAqC,cAArC;;AAEA;AACA,gBAAInB,SAAS;AACXC,mBAAKgB,SAASlB,OAAT,CAAiBE,GADX;AAEXC,uBAAS;AAFE,aAAb;AAIA,mBAAO1B,OAAOa,KAAP,CAAaX,SAAb,EAAwBe,QAAxB,CAAiC,iBAAjC,EAAoDU,MAApD,CAA2DH,MAA3D,EACNR,IADM,CACD,UAAUyB,QAAV,EAAoB;AACxB1C,qBAAO0C,SAASI,GAAhB,EAAqBC,EAArB,CAAwBC,CAAxB,CAA0B,QAA1B;AACD,aAHM,CAAP;AAID,WAdM,CAAP;AAeD,SApBM,CAAP;AAqBD,OAtBM,CAAP;AAuBD,KA1BD;AA2BD,GA7GD;AA8GD,CArID;;AAuIA;AACA","file":"contents.spec.js","sourceRoot":"./index.js","sourcesContent":["/* eslint-env mocha */\nconst { expect } = require('chai')\nconst { client, LONG_TIMEOUT, test_repo } = require('../test-config')\n\n// NodeJS does not have a btoa\nlet btoa = null\n\nif (typeof window !== 'undefined' && window !== null) {\n  btoa = window.btoa\n  // Use the `Buffer` if available (NodeJS)\n} else if (typeof global !== 'undefined' && global !== null) {\n  btoa = function (str) {\n    var buffer = new global['Buffer'](str, 'binary')\n    return buffer.toString('base64')\n  }\n} else {\n  throw new Error('Native btoa function or Buffer is missing')\n}\n\ndescribe('Contents', function () {\n  this.timeout(LONG_TIMEOUT)\n\n  it('returns the default readme', () =>\n    client.repos('octokit/octokit.rb').readme.read()\n    .then(function (readme) {})\n  )\n      // expect(readme.encoding).to.equal(\"base64\")\n      // expect(readme.type).to.equal(\"file\")\n\n  it('returns the contents of a file', () =>\n    client.repos('octokit/octokit.rb').contents('lib/octokit.rb').read()\n    .then(function (contents) {})\n  )\n      // expect(contents.encoding).to.equal(\"base64\")\n      // expect(contents.type).to.equal(\"file\")\n\n  // it \"returns the headers of the request\", ->\n  //   client.repos('octokit/octokit.rb').tarball('master').fetch()\n  //   .then(null, (err) -> console.log err)\n  //   .then (archive_link) ->\n  //     expect(archive_link).to.equal('https://codeload.github.com/octokit/octokit.rb/legacy.tar.gz/master')\n\n  context('With a file', function () {\n    beforeEach(function (done) {\n      let removeFile = function (octoPartial, content) {\n        let config = {\n          sha: content.sha,\n          message: 'Removing as prep for testing'\n        }\n        return octoPartial.remove(config)\n      }\n\n      // If the file exists, remove it. Otherwise, done.\n      function removeFirst(content1) {\n        function removeSecond () {\n          const octoPartial2 = client.repos(test_repo).contents('test_delete.txt')\n          octoPartial2.fetch()\n          /* eslint handle-callback-err: \"off\" */\n          .then(content => {\n            removeFile(octoPartial2, content)\n            .then(x => done())\n          }, err => done())\n        }\n        removeFile(octoPartial, content1)\n        .then(removeSecond, removeSecond)\n      }\n      let octoPartial = client.repos(test_repo).contents('test_create.txt')\n      octoPartial.fetch()\n      /* eslint handle-callback-err: \"off\" */\n      .then(removeFirst, removeFirst)\n\n\n      // In Mocha 3, if the returned value is a promise then it will complain that\n      // we have specified a done() callback _and_ returned a promise.\n      // So, since this test should always succeed even if there is no file (to delete)\n      // just return null so Mocha does not complain.\n      return null\n    })\n\n    it('creates repository contents at a path', () => {\n      const repo = client.repos(test_repo)\n      return repo.fetch().then(({defaultBranch}) => {\n        return repo.branches(defaultBranch).fetch().then(({commit}) => {\n          let config = {\n            message: 'I am commit-ing',\n            content: btoa('Here be the content\\n')\n          }\n          return repo.contents('test_create.txt').add(config)\n          .then(null, function (err) { console.log(err); throw new Error(err) })\n          .then(response => {\n            return expect(response.commit.sha).to.match(/[a-z0-9]{40}/)\n          })\n        })\n      })\n    })\n\n    it('updates repository contents at a path', () => {\n      // Prep work (from previous test)\n      const repo = client.repos(test_repo)\n      return repo.fetch().then(({defaultBranch}) => {\n        return repo.branches(defaultBranch).fetch().then(({commit}) => {\n          let config = {\n            message: 'I am commit-ing',\n            content: btoa('Here be the content\\n')\n          }\n          return repo.contents('test_create.txt').add(config)\n          .then(null, function (err) { console.log(err); throw new Error(err) })\n          .then(response => {\n\n            // Test Start\n            let config = {\n              sha: response.content.sha,\n              message: 'I am commit-ing',\n              content: btoa('Here be moar content')\n            }\n            return client.repos(test_repo).contents('test_create.txt').add(config)\n            .then(response2 => {\n              return expect(response2.commit.sha).to.match(/[a-z0-9]{40}/)\n            })\n          })\n        })\n      })\n    })\n\n    it('deletes repository contents at a path', () => {\n      // Prep work (from previous test)\n      const repo = client.repos(test_repo)\n      return repo.fetch().then(({defaultBranch}) => {\n        return repo.branches(defaultBranch).fetch().then(({commit}) => {\n          let config = {\n            message: 'I am commit-ing for removal',\n            content: btoa('Here be the content\\n')\n          }\n          return repo.contents('test_delete.txt').add(config)\n          .then(null, function (err) { console.log(err); throw new Error(err) })\n          .then(response => {\n            expect(response.commit.sha).to.match(/[a-z0-9]{40}/)\n\n            // Test Start\n            let config = {\n              sha: response.content.sha,\n              message: 'I am rm-ing'\n            }\n            return client.repos(test_repo).contents('test_delete.txt').remove(config)\n            .then(function (response) {\n              expect(response.url).is.a('string')\n            })\n          })\n        })\n      })\n    })\n  })\n})\n\n// TODO: have a non-boolean form of remove()\n// expect(response.commit.sha).to match(/[a-z0-9]{40}/)\n"]}