{"version":3,"sources":["../../test/ruby-specs/commit-comments.spec.js"],"names":["require","expect","client","LONG_TIMEOUT","test_repo","test_github_login","describe","timeout","it","repos","comments","fetch","then","commits","items","user","login","to","equal","commit","context","before","sha","create","body","commit_comment","commitComment","after","remove","not","be","null","update","console","error","err","updatedComment"],"mappings":";;AAAA;eACmBA,QAAQ,MAAR,C;IAAXC,M,YAAAA,M;;gBACuDD,QAAQ,gBAAR,C;IAAvDE,M,aAAAA,M;IAAQC,Y,aAAAA,Y;IAAcC,S,aAAAA,S;IAAWC,iB,aAAAA,iB;;AAEzCC,SAAS,iBAAT,EAA4B,YAAY;AACtC,OAAKC,OAAL,CAAaJ,YAAb;;AAEAK,KAAG,uCAAH,EAA4C,YAAM;AAChD,WAAON,OAAOO,KAAP,CAAa,oBAAb,EAAmCC,QAAnC,CAA4CC,KAA5C,GACNC,IADM,CACD,YAAM;AACV,aAAO,IAAP;AACD,KAHM,CAAP;AAID,GALD;;AAOAJ,KAAG,kDAAH,EAAuD;AAAA,WACrDN,OAAOO,KAAP,CAAa,oBAAb,EAAmCI,OAAnC,CAA2C,0CAA3C,EAAuFH,QAAvF,CAAgGC,KAAhG,GACCC,IADD,CACM;AAAA,UAAEE,KAAF,QAAEA,KAAF;AAAA,aAAab,OAAOa,MAAM,CAAN,EAASC,IAAT,CAAcC,KAArB,EAA4BC,EAA5B,CAA+BC,KAA/B,CAAqC,WAArC,CAAb;AAAA,KADN,CADqD;AAAA,GAAvD;;AAKAV,KAAG,iCAAH,EAAsC;AAAA,WACpCN,OAAOO,KAAP,CAAa,oBAAb,EAAmCC,QAAnC,CAA4C,QAA5C,EAAsDC,KAAtD,GACCC,IADD,CACM;AAAA,aAAUX,OAAOkB,OAAOJ,IAAP,CAAYC,KAAnB,EAA0BC,EAA1B,CAA6BC,KAA7B,CAAmC,WAAnC,CAAV;AAAA,KADN,CADoC;AAAA,GAAtC;;AAKAE,UAAQ,qBAAR,EAA+B,YAAY;AAAA;;AACzCC,WAAO;AAAA,aACLnB,OAAOO,KAAP,CAAaL,SAAb,EAAwBS,OAAxB,CAAgCF,KAAhC,GACCC,IADD,CACM,iBAAa;AAAA,YAAXE,KAAW,SAAXA,KAAW;;AACjB,cAAKK,MAAL,GAAcL,MAAM,CAAN,CAAd;AACA,eAAOZ,OAAOO,KAAP,CAAaL,SAAb,EAAwBS,OAAxB,CAAgC,MAAKM,MAAL,CAAYG,GAA5C,EAAiDZ,QAAjD,CAA0Da,MAA1D,CAAiE,EAACC,MAAM,6BAAP,EAAjE,EACNZ,IADM,CACD,yBAAiB;AACrB,gBAAKa,cAAL,GAAsBC,aAAtB;AACD,SAHM,CAAP;AAID,OAPD,CADK;AAAA,KAAP;;AAYAC,UAAM,YAAM;AACV,aAAO,MAAKF,cAAL,CAAoBG,MAApB,EAAP;AACD,KAFD;;AAIApB,OAAG,0BAAH,EAA+B,YAAM;AACnC,aAAOP,OAAO,MAAKwB,cAAL,CAAoBV,IAApB,CAAyBC,KAAhC,EAAuCC,EAAvC,CAA0CY,GAA1C,CAA8CC,EAA9C,CAAiDC,IAAxD;AACD,KAFD;;AAIAvB,OAAG,0BAAH,EAA+B,YAAM;AACnC,aAAO,MAAKiB,cAAL,CAAoBO,MAApB,CAA2B,EAACR,MAAM,WAAP,EAA3B,EACNZ,IADM,CACD,IADC,EACK;AAAA,eAAOqB,QAAQC,KAAR,CAAcC,GAAd,CAAP;AAAA,OADL,EAENvB,IAFM,CAED;AAAA,eAAkBX,OAAOmC,eAAeZ,IAAtB,EAA4BP,EAA5B,CAA+BC,KAA/B,CAAqC,WAArC,CAAlB;AAAA,OAFC,CAAP;AAGD,KAJD;;AAMAV,OAAG,0BAAH,EAA+B,YAAM;AACnC,aAAO,MAAKiB,cAAL,CAAoBG,MAApB,EAAP;AACD,KAFD;AAGD,GA9BD;AA+BD,CAnDD","file":"commit-comments.spec.js","sourceRoot":"./index.js","sourcesContent":["/* eslint-env mocha */\nconst { expect } = require('chai')\nconst { client, LONG_TIMEOUT, test_repo, test_github_login } = require('../test-config')\n\ndescribe('Commit Comments', function () {\n  this.timeout(LONG_TIMEOUT)\n\n  it('returns a list of all commit comments', () => {\n    return client.repos('sferik/rails_admin').comments.fetch()\n    .then(() => {\n      return true\n    })\n  })\n\n  it('returns a list of comments for a specific commit', () =>\n    client.repos('sferik/rails_admin').commits('629e9fd9d4df25528e84d31afdc8ebeb0f56fbb3').comments.fetch()\n    .then(({items}) => expect(items[0].user.login).to.equal('bbenezech'))\n  )\n\n  it('returns a single commit comment', () =>\n    client.repos('sferik/rails_admin').comments('861907').fetch()\n    .then(commit => expect(commit.user.login).to.equal('bbenezech'))\n  )\n\n  context('with commit comment', function () {\n    before(() =>\n      client.repos(test_repo).commits.fetch()\n      .then(({items}) => {\n        this.commit = items[0]\n        return client.repos(test_repo).commits(this.commit.sha).comments.create({body: ':metal:\\n:sparkles:\\n:cake:'})\n        .then(commitComment => {\n          this.commit_comment = commitComment\n        })\n      }\n      )\n    )\n\n    after(() => {\n      return this.commit_comment.remove()\n    })\n\n    it('creates a commit comment', () => {\n      return expect(this.commit_comment.user.login).to.not.be.null\n    })\n\n    it('updates a commit comment', () => {\n      return this.commit_comment.update({body: ':penguin:'})\n      .then(null, err => console.error(err))\n      .then(updatedComment => expect(updatedComment.body).to.equal(':penguin:'))\n    })\n\n    it('deletes a commit comment', () => {\n      return this.commit_comment.remove()\n    })\n  })\n})\n"]}