{"version":3,"sources":["../../test/ruby-specs/gists.spec.js"],"names":["require","expect","client","LONG_TIMEOUT","test_github_login","describe","timeout","before","newGist","description","public","files","content","gists","create","then","gist","comments","body","gist_comment","gistComment","it","url","to","be","a","ok","update","star","add","flag","true","remove","contains","false","skip","forks","fetch","an","Array","id","console","error","e","owner","login","equal","starred"],"mappings":"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","file":"gists.spec.js","sourceRoot":"./index.js","sourcesContent":["/* eslint-env mocha */\nconst { expect } = require('chai')\nconst { client, LONG_TIMEOUT, test_github_login } = require('../test-config')\n\ndescribe('Gists', function () {\n  this.timeout(LONG_TIMEOUT)\n\n\n  describe('Authenticated Gists', function () {\n    before(function () {\n      let newGist = {\n        description: 'A gist from Octokat',\n        public: true,\n        files: {\n          'zen.text': {\n            content: 'Keep it logically awesome.'\n          }\n        }\n      }\n\n      return client.gists.create(newGist)\n      .then(gist => {\n        this.gist = gist\n        return this.gist.comments.create({body: ':metal:'})\n        .then(gistComment => {\n          this.gist_comment = gistComment\n        })\n      }\n      )\n    })\n\n    it('creates a new gist', function () {\n      expect(this.gist.url).to.be.a('string')\n      return expect(this.gist.files['zen.text']).to.be.ok\n    })\n\n    it('creates a new gist comment', function () {\n      return expect(this.gist_comment.url).to.be.a('string')\n    })\n\n    it('edit an existing gist', function () {\n      return this.gist.update({description: 'GitHub Zen'})\n    })\n\n    it('stars an existing gist', function () {\n      return this.gist.star.add()\n      .then(flag => expect(flag).to.be.true)\n    })\n\n    it('unstars an existing gist', function () {\n      return this.gist.star.remove()\n      .then(flag => expect(flag).to.be.true)\n    })\n\n    it('is not starred', function () {\n      return this.gist.star.contains()\n      .then(flag => expect(flag).to.be.false)\n    })\n\n    it.skip('forks an existing gist', () =>\n      client.gists('839d32ef87bc22ba5231').forks.create()\n      .then(gist => {\n        return gist.remove()\n      }\n      )\n    )\n\n    it('returns the list of gist comments', function () {\n      return this.gist.comments.fetch()\n      .then(comments => {\n        return expect(comments).to.be.an.Array\n      }\n      )\n    })\n\n    it('returns a gist comment', function () {\n      return this.gist.comments(this.gist_comment.id).fetch()\n      .then(null, e => console.error(e))\n    })\n\n    it('updates a gist comment', function () {\n      return this.gist.comments(this.gist_comment.id).update({body: ':heart:'})\n    })\n\n    it('deletes a gist comment', function () {\n      return this.gist.comments(this.gist_comment.id).remove()\n    })\n\n    it('deletes a gist', function () {\n      return this.gist.remove()\n    })\n  })\n\n  describe('Unauthenticated Gists', function () {\n    it('returns public gists', () =>\n      client.gists.public.fetch()\n      .then(gists => expect(gists).to.be.an.Array)\n    )\n\n    // it \"with username passed\", ->\n    //   client.users('defunkt').gists.fetch()\n    //   # .then(null,(e) -> console.error e)\n    //   .then (gists) ->\n    //     expect(gists).to.be.an.Array\n\n    it('without a username passed', () =>\n      client.gists.fetch()\n      .then(null, e => console.error(e))\n      .then(gists => expect(gists).to.be.an.Array)\n    )\n\n    it('returns the gist by ID', () =>\n      client.gists(790381).fetch()\n      .then(gist => expect(gist.owner.login).to.equal('jmccartie'))\n    )\n\n    it(\"returns the user's starred gists\", () =>\n      client.gists.starred.fetch()\n      .then(null, e => console.error(e))\n      .then(gists => expect(gists).to.be.an.Array)\n    )\n  })\n})\n"]}