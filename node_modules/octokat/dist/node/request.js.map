{"version":3,"sources":["../../src/request.js"],"names":["module","exports","fetchImpl","userAgent","usePostInsteadOfPatch","_fetchImpl","_userAgent","_usePostInsteadOfPatch","method","path","data","isRaw","isBase64","isBoolean","contentType","acceptHeader","test","Error","headers","fetchArgs","body","JSON","stringify","then","response","additional","get","rateLimit","parseFloat","rateLimitRemaining","rateLimitReset","rate","remaining","limit","reset","scopes","split","valuePromise","status","Promise","resolve","indexOf","json","text","reject","value","request","url","statusText","ok","size","timeout"],"mappings":"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","file":"request.js","sourcesContent":["// Request Function\n// ===============================\n//\n// Generates the actual HTTP requests to GitHub.\n// Handles ETag caching, authentication headers, boolean requests, and paged results\n\n// # Construct the request function.\n// It contains all the auth credentials passed in to the client constructor\n\nmodule.exports = class Requestor {\n  constructor (fetchImpl, userAgent, usePostInsteadOfPatch) {\n    this._fetchImpl = fetchImpl\n    // Set the `User-Agent` because it is required and NodeJS\n    // does not send one by default.\n    // See http://developer.github.com/v3/#user-agent-required\n    this._userAgent = userAgent || 'octokat.js'\n    this._usePostInsteadOfPatch = usePostInsteadOfPatch\n  }\n\n  request (method, path, data, isRaw, isBase64, isBoolean, contentType, acceptHeader) {\n    if (!/^http/.test(path)) {\n      throw new Error('BUG: All Paths must be absolute (start with https://)')\n    }\n\n    const headers = {\n      'Accept': isRaw ? 'application/vnd.github.raw' : acceptHeader || 'application/json',\n      'User-Agent': this._userAgent\n    }\n\n    let fetchArgs = {\n      // TODO: add the followRedirects flag\n      method,\n      headers,\n      body: (!isRaw && data && JSON.stringify(data)) || data\n    }\n\n    return this._fetchImpl(path, fetchArgs)\n    .then((response) => {\n      // Collect any response headers into an object\n      const additional = {}\n      if (response.headers.get('X-RateLimit-Limit')) {\n        let rateLimit = parseFloat(response.headers.get('X-RateLimit-Limit'))\n        let rateLimitRemaining = parseFloat(response.headers.get('X-RateLimit-Remaining'))\n        let rateLimitReset = parseFloat(response.headers.get('X-RateLimit-Reset'))\n        // Reset time is in seconds, not milliseconds\n        // if rateLimitReset\n        //   rateLimitReset = new Date(rateLimitReset * 1000)\n        additional.rate = {\n          remaining: rateLimitRemaining,\n          limit: rateLimit,\n          reset: rateLimitReset\n        }\n\n        if (response.headers.get('X-OAuth-Scopes')) {\n          additional.scopes = response.headers.get('X-OAuth-Scopes').split(', ')\n        }\n      }\n\n      // Massage the value we return\n      let valuePromise\n\n      if (isBoolean && response.status === 204) {\n        // If the request is a boolean yes/no question GitHub will indicate\n        // via the HTTP Status of 204 (No Content) or 404 instead of a 200.\n        valuePromise = Promise.resolve(true)\n      } else if (isBoolean && response.status === 404) {\n        valuePromise = Promise.resolve(false)\n      } else if ((response.status >= 200 && response.status < 300) || response.status === 304 || response.status === 302 || response.status === 0) {\n        // If it was a boolean question and the server responded with 204 ignore.\n\n        // If the status was 304 then let the cache handler pick it up. leave data blank\n        if (response.status === 304) {\n          valuePromise = Promise.resolve(null)\n        } else {\n          // TODO: use a blob if we are expecting a binary\n\n          const contentType = response.headers.get('content-type') || ''\n\n          // Use .indexOf instead of .startsWith because PhantomJS does not support .startsWith\n          if (contentType.indexOf('application/json') === 0) {\n            valuePromise = response.json()\n          } else {\n            // Other contentTypes:\n            // - 'text/plain'\n            // - 'application/octocat-stream'\n            // - 'application/vnd.github.raw'\n            valuePromise = response.text()\n          }\n        }\n      } else {\n        // TODO: Reject the Promise\n        valuePromise = response.text().then((text) => {\n          return Promise.reject(new Error(`${text} ${fetchArgs.method} ${path} Status: ${response.status}`))\n        })\n      }\n\n      return valuePromise.then((value) => {\n        // TODO: return new OctokatResponse()\n        return {\n          value: value,\n          request: {\n            url: path,\n            method: fetchArgs.method,\n            headers: fetchArgs.headers,\n            body: fetchArgs.body\n          },\n          response: {\n            status: response.status,\n            statusText: response.statusText,\n            headers: response.headers,\n            ok: response.ok,\n            size: response.size,\n            timeout: response.timeout\n          },\n          additional: additional\n        }\n      })\n    })\n  }\n}\n"]}