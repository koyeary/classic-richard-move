{"version":3,"sources":["../../src/chained.js"],"names":["TREE_OPTIONS","require","plus","chained","verbMethods","path","name","fn","args","length","Error","separator","pathWithArgs","join","forEach","Object","defineProperty","camelize","configurable","enumerable","get","injectVerbMethods","__path","module","exports"],"mappings":";;AAAA,IAAMA,eAAeC,QAAQ,wBAAR,CAArB;AACA,IAAMC,OAAOD,QAAQ,QAAR,CAAb;;AAEA,IAAME,UAAU,SAAVA,OAAU,CAACC,WAAD,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,EAA1B,EAAiC;AAC/CA,OAAKA,MAAO,YAAa;AAAA,sCAATC,IAAS;AAATA,UAAS;AAAA;;AACvB,QAAI,CAACA,KAAKC,MAAV,EAAkB;AAAE,YAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AAAmE;AACvF;;AAEA,QAAMC,YAAYL,SAAS,SAAT,GAAqB,KAArB,GAA6B,GAA/C;AACA,QAAMM,eAAkBP,IAAlB,SAA0BG,KAAKK,IAAL,CAAUF,SAAV,CAAhC;AACA,WAAOR,QAAQC,WAAR,EAAqBQ,YAArB,EAAmC,EAAnC,CAAP;AACD,GAPD;;AASA;AACAZ,eAAac,OAAb,CAAqB,UAACR,IAAD,EAAU;AAC7BS,WAAOC,cAAP,CAAsBT,EAAtB,EAA0BL,KAAKe,QAAL,CAAcX,IAAd,CAA1B,EAA+C;AAC7CY,oBAAc,IAD+B;AAE7CC,kBAAY,IAFiC;AAG7CC,WAAK;AAAA,eAAMjB,QAAQC,WAAR,EAAwBC,IAAxB,SAAgCC,IAAhC,EAAwCA,IAAxC,CAAN;AAAA;AAHwC,KAA/C;AAKD,GAND;;AAQA;AACAF,cAAYiB,iBAAZ,CAA8BhB,IAA9B,EAAoCE,EAApC;;AAEAA,KAAGe,MAAH,GAAYjB,IAAZ;;AAEA,SAAOE,EAAP;AACD,CAzBD;;AA2BAgB,OAAOC,OAAP,GAAiBrB,OAAjB","file":"chained.js","sourcesContent":["const TREE_OPTIONS = require('./grammar/tree-options')\nconst plus = require('./plus')\n\nconst chained = (verbMethods, path, name, fn) => {\n  fn = fn || ((...args) => {\n    if (!args.length) { throw new Error('BUG! must be called with at least one argument') }\n    // TODO: Validate the args (in DEBUG mode) using the `path` to look up\n\n    const separator = name === 'compare' ? '...' : '/'\n    const pathWithArgs = `${path}/${args.join(separator)}`\n    return chained(verbMethods, pathWithArgs, '')\n  })\n\n  // inject the child options\n  TREE_OPTIONS.forEach((name) => {\n    Object.defineProperty(fn, plus.camelize(name), {\n      configurable: true,\n      enumerable: true,\n      get: () => chained(verbMethods, `${path}/${name}`, name)\n    })\n  })\n\n  // Inject the verb methods\n  verbMethods.injectVerbMethods(path, fn)\n\n  fn.__path = path\n\n  return fn\n}\n\nmodule.exports = chained\n"]}