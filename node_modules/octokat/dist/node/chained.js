'use strict';

var TREE_OPTIONS = require('./grammar/tree-options');
var plus = require('./plus');

var chained = function chained(verbMethods, path, name, fn) {
  fn = fn || function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (!args.length) {
      throw new Error('BUG! must be called with at least one argument');
    }
    // TODO: Validate the args (in DEBUG mode) using the `path` to look up

    var separator = name === 'compare' ? '...' : '/';
    var pathWithArgs = path + '/' + args.join(separator);
    return chained(verbMethods, pathWithArgs, '');
  };

  // inject the child options
  TREE_OPTIONS.forEach(function (name) {
    Object.defineProperty(fn, plus.camelize(name), {
      configurable: true,
      enumerable: true,
      get: function get() {
        return chained(verbMethods, path + '/' + name, name);
      }
    });
  });

  // Inject the verb methods
  verbMethods.injectVerbMethods(path, fn);

  fn.__path = path;

  return fn;
};

module.exports = chained;
//# sourceMappingURL=chained.js.map